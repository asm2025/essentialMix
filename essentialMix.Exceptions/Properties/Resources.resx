<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BufferNotLargeEnough" xml:space="preserve">
    <value>Buffer is not large enough for the requested data.</value>
  </data>
  <data name="CollectionLocked" xml:space="preserve">
    <value>Collection is locked.</value>
  </data>
  <data name="CultureNotSupported" xml:space="preserve">
    <value>Culture is not supported.</value>
  </data>
  <data name="DuplicateKey" xml:space="preserve">
    <value>Key already exists.</value>
  </data>
  <data name="ImagePropertiesMismatch" xml:space="preserve">
    <value>Destination image has different size or pixel format.</value>
  </data>
  <data name="InvalidHandle" xml:space="preserve">
    <value>Invalid handle.</value>
  </data>
  <data name="InvalidImageProperties" xml:space="preserve">
    <value>The unmanaged image has some invalid properties, therefore it cannot be converted to a managed image.</value>
  </data>
  <data name="ItemFixed" xml:space="preserve">
    <value>Item is fixed.</value>
  </data>
  <data name="ItemLocked" xml:space="preserve">
    <value>Item is locked.</value>
  </data>
  <data name="LimitReached" xml:space="preserve">
    <value>Limit has been reached.</value>
  </data>
  <data name="NotConnected" xml:space="preserve">
    <value>Not connected.</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>Item not found.</value>
  </data>
  <data name="NotMethodExpression" xml:space="preserve">
    <value>NotMethodExpression</value>
  </data>
  <data name="NotSafeToCache" xml:space="preserve">
    <value>Value is not safe to cache.</value>
  </data>
  <data name="NotSafeTypeToCache" xml:space="preserve">
    <value>Value of type '{0}' is not safe to cache.</value>
  </data>
  <data name="UnsupportedImageFormat" xml:space="preserve">
    <value>Pixel format is not supported.</value>
  </data>
  <data name="ValueIsNotEnumType" xml:space="preserve">
    <value>Value is not an enumeration type.</value>
  </data>
  <data name="ValueTypeIsNotEnumType" xml:space="preserve">
    <value>Value of type '{0}' is not an enumeration type.</value>
  </data>
  <data name="NotValidLZMAStream" xml:space="preserve">
    <value>Specified stream is not a valid LZMA stream.</value>
  </data>
  <data name="InvalidArchive" xml:space="preserve">
    <value>Invalid archive.</value>
  </data>
  <data name="CompressionFailed" xml:space="preserve">
    <value>Compression failed.</value>
  </data>
  <data name="ExtractionFailed" xml:space="preserve">
    <value>Extraction failed.</value>
  </data>
  <data name="InvalidSfxSettings" xml:space="preserve">
    <value>SFX settings validation failed.</value>
  </data>
  <data name="SevenZipException" xml:space="preserve">
    <value>SevenZip unknown exception.</value>
  </data>
  <data name="CompressionError" xml:space="preserve">
    <value>Compression error.</value>
  </data>
  <data name="InvalidFileName" xml:space="preserve">
    <value>Invalid file name.</value>
  </data>
  <data name="LibraryNotLoaded" xml:space="preserve">
    <value>Library could not be loaded.</value>
  </data>
  <data name="VersionChanged" xml:space="preserve">
    <value>Collection version changed.</value>
  </data>
  <data name="TypeMismatch" xml:space="preserve">
    <value>Type is not of the expected types.</value>
  </data>
  <data name="TypeNameMismatch" xml:space="preserve">
    <value>Type '{0}' is not of the expected types.</value>
  </data>
  <data name="SerializationDataMissing" xml:space="preserve">
    <value>Serialization data is missing.</value>
  </data>
  <data name="KeyIsNull" xml:space="preserve">
    <value>Key is null.</value>
  </data>
  <data name="ArrayTooSmall" xml:space="preserve">
    <value>Array is too small to hold all the values.</value>
  </data>
  <data name="LBoundLargerThanZero" xml:space="preserve">
    <value>Lower bound is larger than zero.</value>
  </data>
  <data name="ArgumentNameHasNullValue" xml:space="preserve">
    <value>The {0} argument included a null value. (Parameter '{0}')</value>
  </data>
  <data name="ArgumentHasNullValue" xml:space="preserve">
    <value>The argument included a null value.</value>
  </data>
  <data name="CollectionIsEmpty" xml:space="preserve">
    <value>Collection is empty.</value>
  </data>
</root>